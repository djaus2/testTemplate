@page "/fetchdata1"
@using EFBlazorBasics_Wasm.Shared
@using Newtonsoft.Json
@inject HttpClient Http


<h1>Helper Volunteers - Cascade Delete</h1>

<p>This page demonstrates deleting Db entities via a service.</p>

@if (!((Activitys == null)||(Rounds == null)||(Helpers == null)))
{
    <EditForm Model="@values">    
        <table class="table">
            <tr>
                <td>
                    <button @onclick="@DeleteRound">Delete Round</button>
                &nbsp;Select Id&nbsp;
                    <InputNumber @bind-Value="values.RoundId" />
                </td>
            </tr>
        </table>
        <table class="table">
            <tr>
                <td>
                    <button @onclick="@DeleteActivity">Delete Activity</button>
                &nbsp;Select Id&nbsp;
                    <InputNumber @bind-Value="values.ActivityId" />
                </td>
            </tr>
        </table>
        <table class="table">
            <tr>
                <td>
                    <button @onclick="@DeleteHelper">Delete Helper</button>
                &nbsp;Select Id&nbsp;
                    <InputNumber @bind-Value="values.HelperId" />
                </td>
            </tr>
        </table>
    </EditForm>
}
else
{
    <p><em>Loading Activities, Rounds and Helpers...</em></p>
}

<h2>Activitys</h2>
@if (Activitys == null)
{
    <p><em>Loading Activities...</em></p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Round</th>
                <th>Helper</th>
                <th>Task</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in Activitys)
            {
                <tr>
                    <td>@activity.Id</td>
                    <td>@activity.Round.No</td>
                    @if (@activity.Helper != null)
                    {
                        <td>@activity.Helper.Name</td>
                    }
                    else
                    {
                        <td>NULL</td>
                    }
                    <td>@activity.Task</td>
                </tr>
            }
        </tbody>
    </table>
}

    

<h2>Helpers</h2>
@if (Helpers == null)
{
    <p><em>Loading Helpers...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hlpr in Helpers)
            {
                <tr>
                    <td>@hlpr.Id</td>
                    <td>@hlpr.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Rounds</h2>
@if (Rounds == null)
{
    <p><em>Loading Rounds...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Round No.</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var round in Rounds)
            {
                <tr>
                    <td>@round.Id</td>
                    <td>@round.No</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Activity> Activitys;
    private List<Helper> Helpers;
    private List<Round> Rounds;

    public class Values {
        public int ActivityId { get; set; } = 1;
        public int RoundId { get; set; } = 1;
        public int HelperId { get; set; } = 1;
        public int  newRoundNo { get; set; } = 0;
        public string newName { get; set; } = "";
        public string newTask { get; set; } = "";
    }



    public Values values { get; set; } = new Values();

    private async Task DeleteRound()
    {
        await Http.DeleteAsync($"DbRounds/{values.RoundId}");
        await UpdateData();
    }

    private async Task DeleteHelper()
    {
        await Http.DeleteAsync($"DbHelpers/{values.HelperId}");
        await UpdateData();
    }

    private async Task DeleteActivity()
    {
        await Http.DeleteAsync($"DbActivitys/{values.ActivityId}");
        await UpdateData();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await UpdateData();
    }

    async Task UpdateData()
    {
        Activitys = (await Http.GetFromJsonAsync<Activity[]>("DbActivitys")).ToList();
        Helpers = (await Http.GetFromJsonAsync<Helper[]>("DbHelpers")).ToList();
        Rounds = (await Http.GetFromJsonAsync<Round[]>("DbRounds")).ToList();
        
        /* Previous version got the Helpers and Rounds 
           from inspection of Helper and Round properties of Activitys
        ================================================================
        Helpers = new List<Helper>();
        Rounds = new List<Round>();
        foreach (Activity act in Activitys)
        {
            Helper help = act.Helper;
            if (help != null)
            {
                var hs = from h in Helpers where h.Id == help.Id select h;
                if (hs.Count()==0)
                    Helpers.Add(help);
            }
            Round round = act.Round;
            if (round != null)
            {
                var rs = from r in Rounds where r.Id == round.Id select r;
                if (rs.Count()==0)
                    Rounds.Add(round);
            }                   
        }*/
    }
}
